def ccw(point1, point2, otherPoint):
   if (otherPoint.y-point1.y)*(point2.x-point1.x) > (point2.y-point1.y)*(otherPoint.x-point1.x) == True:
       return True
   else: 
       return False

def lineIntersect(p1, q1, p2, q2):
    
    if (ccw(p1, q1, p2) == True and ccw(p1, q1, q2) == False) and (ccw(p2, q1, p1) == True and ccw(p2, q2, q1) == False):
        return True
    else:
        return False
    
class Platform():
    
    def __init__(self, x, y, w, h):
        
        self.position = PVector(x,y)
        self.h = h
        self.w = w    
        
    def display(self):
        screenPos = worldPoint_to_screenPoint(self.position)
        rect(screenPos.x, screenPos.y, self.w, -self.h)
        
class Player():
    
    def __init__(self,x,y):
        
        self.position = PVector(x, y)
        self.acceleration = PVector(0,0)
        self.velocity = PVector(0,0)
        self.friction = .6
        self.maxSpeed = 2
        self.maxJump = 1
        self.playerDimensions = 30
        self.gravity = -0.5
        
      #  ray1 = [False, PVector(self.position.x + self.playerDimensions/2, self.position.y - self.playerDimensions/2), PVector(self.position.x + self.playerDimensions/2, self.position.y + self.maxJump)]  #up
      #  ray2 = [False, PVector(self.position.x + self.playerDimensions/2, self.position.y - self.playerDimensions/2), PVector(self.position.x + self.playerDimensions/2, self.position.y - self.playerDimensions - self.max jump)]  #down
      #  ray3 = [False, PVector(self.position.x + self.playerDimensions/2, self.position.y - self.playerDimensions/2), PVector(self.position.x - self.velocity, self.position.y - self.playerDimensions/2)]  #left
      # ray4 = [False, PVector(self.position.x + self.playerDimensions/2, self.position.y - self.playerDimensions/2), PVector(self.position.x + self.playerDimensions + self.velocity, self.position.y - self.playerDimensions/2)]  #right
   
    def display(self):
        screenPos = worldPoint_to_screenPoint(self.position)
        
        fill(0)
        rect(int(screenPos.x - self.playerDimensions/2), int(screenPos.y - self.playerDimensions/2), self.playerDimensions, self.playerDimensions)
        line(screenPos.x - self.velocity.x, screenPos.y - self.playerDimensions/2, screenPos.x , screenPos.y - self.playerDimensions/2)
        
        # rect(self.bottomBorder[0],self.bottomBorder[1],self.bottomBorder[2],self.bottomBorder[3])
        # rect(self.leftBorder[0], self.leftBorder[1],self.leftBorder[2], self.leftBorder[3])
        # rect(self.rightBorder[0], self.rightBorder[1], self.rightBorder[2], self.rightBorder[3])
        # rect(self.platform[0], self.platform[1], self.platform[2], self.platform[3])
            
    def applyForce(self,x ,y):
        
        self.acceleration.x += x
        self.acceleration.y += y
        
    #def rayCasting(self, ray1, ray2, ray3, ray4, bottomBorder, leftBorder, rightBorder, platform):
        
       # global
       # if lineIntersection(ray1[1], ray1[2], platform[0], PVector(platform[0].y - platform[1].y))
       # if lineIntersection(ray2[1], ray2[2], PVector(platform[0], PVector(platform[0].y - platform[1].y))
                                
    def update(self):
        
        self.applyForce(0,self.gravity)
        
        if keyArrays[0] == True:
            self.applyForce(-self.maxSpeed, 0)
        if keyArrays[1] == True:
            self.applyForce(self.maxSpeed,0)
        if keyArrays[2] == True:
            self.applyForce(0,self.maxJump)
        if keyArrays[3] == True:
            self.applyForce(0,-self.maxJump)
            
       # self.rayCasting
            
        self.velocity.x += self.acceleration.x
        self.velocity.y += self.acceleration.y
        
        self.velocity.x *= self.friction
        
        self.position.x += self.velocity.x
        self.position.y += self.velocity.y
            
        self.acceleration = PVector(0,0)
            
        self.display()
    
def worldPoint_to_screenPoint(worldPoints):
    return PVector((width/2 + worldPoints.x),(height/2 - worldPoints.y))
    
def setup():
    size(400,400)
    
    global platformList
    platformList = []
    platformList.append(Platform(-200,200,10,-350))
    platformList.append(Platform(-200,-350,400,20))
    
    global playerObj
    playerObj = Player(0,0)
    
    global keyArrays
    keyArrays = [False, False, False, False]     # up down left right
    
    
def draw():
    #frameRate(20)
    background(255,255,255)
    
    for platform in platformList:
        platform.display()
    
    playerObj.update()
    
def keyPressed():
    
    if keyCode == LEFT or key == "a" :
        keyArrays[0] = True
    if keyCode == RIGHT or key == "d":
        keyArrays[1] = True
    if keyCode == UP or key == "w":
        keyArrays[2] = True 
    if keyCode == DOWN or key == "s":
        keyArrays[3] = True
def keyReleased():
    
    if keyCode == LEFT or key == "a":
        keyArrays[0] = False
    if keyCode == RIGHT or key == "d":
        keyArrays[1] = False
    if keyCode == UP or key == "w":
        keyArrays[2] = False 
    if keyCode == DOWN or key == "s":
        keyArrays[3] = False
