def ccw(point1, point2, otherPoint):
   if (otherPoint.y-point1.y)*(point2.x-point1.x) > (point2.y-point1.y)*(otherPoint.x-point1.x) == True:
       return True
   else: 
       return False

def lineIntersect(p1, q1, p2, q2):
    
    if (ccw(p1, q1, p2) == True and ccw(p1, q1, q2) == False) and (ccw(p2, q1, p1) == True and ccw(p2, q2, q1) == False):
        return True
    else:
        return False
    
class Platform():
    
    def __init__(self, x, y, w, h):
        
        self.position = PVector(x,y)
        self.h = h
        self.w = w    
        
    def display(self):
        screenPos = worldPoint_to_screenPoint(self.position)
        rect(screenPos.x, screenPos.y, self.w, -self.h)
        
class Player():
    
    def __init__(self,x,y):
        
        self.position = PVector(x, y)
        self.acceleration = PVector(0,0)
        self.velocity = PVector(0,0)
        self.friction = .9
        self.maxSpeed = 2
        self.maxJump = 1
        self.playerDimensions = 30
        self.gravity = -0
        self.moving = False
        
        ray1 = [False, PVector(self.position.x + self.playerDimensions/2, self.position.y - self.playerDimensions/2), PVector(self.position.x + self.playerDimensions/2, self.position.y + self.maxJump)]  #up
        ray2 = [False, PVector(self.position.x + self.playerDimensions/2, self.position.y - self.playerDimensions/2), PVector(self.position.x + self.playerDimensions/2, self.position.y - self.playerDimensions - self.maxJump)]  #down
        ray3 = [False, PVector(self.position.x + self.playerDimensions/2, self.position.y - self.playerDimensions/2), PVector(self.position.x - self.velocity, self.position.y - self.playerDimensions/2)]  #left
        ray4 = [False, PVector(self.position.x + self.playerDimensions/2, self.position.y - self.playerDimensions/2), PVector(self.position.x + self.playerDimensions + self.velocity, self.position.y - self.playerDimensions/2)]  #right
   
    def display(self):
        screenPos = worldPoint_to_screenPoint(self.position)
        
        fill(0)
        rect(int(screenPos.x - self.playerDimensions/2), int(screenPos.y - self.playerDimensions/2), self.playerDimensions, self.playerDimensions)
        line(screenPos.x - self.velocity.x, screenPos.y - self.playerDimensions/2, screenPos.x , screenPos.y - self.playerDimensions/2)
    
    def applyForce(self,x ,y):
        
        self.acceleration.x += x
        self.acceleration.y += y
        
    def rayCasting(self, ray1, ray2, ray3, ray4, platformList):
        
       for platforms in plaformList:
           if lineIntersect(ray4[1], ray4[2], PVector(platform[0], platform[1]), PVector(platform[0], platform[1] - platform[3])):
               self.applyForce(self.positon.x + (self.playerDimension * 1.5) + self.velocity.x,0)
               
           if lineIntersect(ray3[1], ray3[2], PVector(platform[0] + platform[2], platform[1]), PVector(platform[0] + platform[2], platform[1] - platform[3])):
               self.applyForce(self.position.x + (self.playerDimension / 2) + self.velocity.x,0)
               
           if lineIntersect(ray1[1], ray1[2], PVector(platform[0], platform[1]-platform[3]), PVector(platform[0]+platform[2], platform[1]-platform[3])):
               self.applyForce(0, self.position.y + (self.playerDimension / 2) + self.maxJump)
               
           if lineIntersect(ray2[1], ray2[2], PVector(platform[0], platform[1]), PVector(platform[0]+platform[2], platform[1])):   
               self.applyForce(0, self.position.y - (self.playerDimensions * 1.5) - self.maxJump)
                       
    def update(self):
        
        self.applyForce(0,self.gravity)
        
        if keyArrays[0] == True:
            self.applyForce(-self.maxSpeed, 0)
        if keyArrays[1] == True:
            self.applyForce(self.maxSpeed,0)
        if keyArrays[2] == True:
            self.applyForce(0,self.maxJump)
        if keyArrays[3] == True:
            self.applyForce(0,-self.maxJump)
            
       # self.rayCasting
            
        self.velocity.x += self.acceleration.x
        self.velocity.y += self.acceleration.y
        
        self.velocity.x *= self.friction
        self.velocity.y *= self.friction
        
        self.position.x += self.velocity.x
        self.position.y += self.velocity.y
        
        self.acceleration = PVector(0,0)
        
        self.display()
         
def worldPoint_to_screenPoint(worldPoints):
    return PVector((width/2 + worldPoints.x),(height/2 - worldPoints.y))
    
def setup():
    size(400,400)
    
    global platformList
    platformList = []
    platformList.append(Platform(-180,150,20,-310))
    platformList.append(Platform(-180,-170,340,20))
    platformList.append(Platform(140,150,20,-310))
    platformList.append(Platform(-100,-100,180,20))
    
    
    global playerObj
    playerObj = Player(0,0)
    
    global keyArrays
    keyArrays = [False, False, False, False]     # up down left right
    
    
def draw():
    #frameRate(20)
    background(255,255,255)
    
    for platform in platformList:
        platform.display()
    
    playerObj.update()
    
def keyPressed():
    
    if keyCode == LEFT or key == "a" :
        keyArrays[0] = True
    if keyCode == RIGHT or key == "d":
        keyArrays[1] = True
    if keyCode == UP or key == "w":
        keyArrays[2] = True 
    if keyCode == DOWN or key == "s":
        keyArrays[3] = True
def keyReleased():
    
    if keyCode == LEFT or key == "a":
        keyArrays[0] = False
    if keyCode == RIGHT or key == "d":
        keyArrays[1] = False
    if keyCode == UP or key == "w":
        keyArrays[2] = False 
    if keyCode == DOWN or key == "s":
        keyArrays[3] = False
